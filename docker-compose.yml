version: '3.9'

services:
  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "${PORT}:8080"
    environment:
      - PORT=8080
      - AUTH_SERVICE_URL=http://auth-service:8081
      - USERS_SERVICE_URL=http://users-service:8082
      - MEDIA_SERVICE_URL=http://media-service:8083
      - SEARCH_SERVICE_URL=http://search-service:8084
      - POSTS_SERVICE_URL=http://posts-service:8085
    depends_on:
      - auth-service
      - users-service
      - media-service
      - search-service
      - posts-service
    env_file:
      - .env

  auth-service:
    build:
      context: ./auth-service
    ports:
      - "${AUTH_PORT}:8080"
    environment:
      - AUTH_HOST=auth-service
      - AUTH_PORT=${AUTH_PORT}
      - AUTH_DB_HOST=postgres_auth
      - AUTH_DB_PORT=5432
      - AUTH_DB_AUTO_UPDATE=update
      - KAFKA_SERVER=kafka:9092
    depends_on:
      - postgres_auth
      - kafka
      - redis
    env_file:
      - .env

  users-service:
    build:
      context: ./users-service
    ports:
      - "${USERS_PORT}:8080"
    environment:
      - USERS_HOST=users-service
      - USERS_PORT=${USERS_PORT}
      - USERS_DB_HOST=postgres_users
      - USERS_DB_PORT=5432
      - USERS_REDIS_HOST=redis
      - USERS_REDIS_PORT=6379
      - KAFKA_SERVER=kafka:9092
    depends_on:
      - postgres_users
      - kafka
      - redis
    env_file:
      - .env

  media-service:
    build:
      context: ./media-service
    ports:
      - "${MEDIA_PORT}:8080"
    environment:
      - MEDIA_HOST=media-service
      - MEDIA_PORT=${MEDIA_PORT}
      - s3.internalEndpoint=http://minio:9000
      - KAFKA_SERVER=kafka:9092
    depends_on:
      - minio
    env_file:
      - .env

  search-service:
    build:
      context: ./search-service
    ports:
      - "${SEARCH_PORT}:8080"
    environment:
      - SEARCH_HOST=search-service
      - SEARCH_PORT=${SEARCH_PORT}
      - s3.internalEndpoint=http://minio:9000
      - KAFKA_SERVER=kafka:9092
      - SEARCH_ENGINE_HOST=elasticsearch
      - SEARCH_ENGINE_PORT=9200
    depends_on:
      - elasticsearch
    restart: on-failure:5
    env_file:
      - .env

  posts-service:
    build:
      context: ./posts-service
    ports:
      - "${POSTS_PORT}:8080"
    environment:
      - POSTS_HOST=posts-service
      - POSTS_PORT=${POSTS_PORT}
      - POSTS_DB_HOST=postgres_posts
      - POSTS_DB_PORT=5432
    depends_on:
      - postgres_posts
      - redis
    env_file:
      - .env

  postgres_auth:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USERNAME}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  postgres_users:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${USERS_DB_NAME}
      POSTGRES_USER: ${USERS_DB_USERNAME}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  postgres_posts:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTS_DB_NAME}
      POSTGRES_USER: ${POSTS_DB_USERNAME}
      POSTGRES_PASSWORD: ${POSTS_DB_PASSWORD}
    volumes:
      - postgres_posts_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: metaclone-cluster
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
    command: server /data
    restart: unless-stopped

  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
    env_file:
      - .env
    environment:
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      AVATARS_BUCKET: ${AVATARS_BUCKET}
    entrypoint: >
      /bin/sh -c "
      set -e;
      sleep 5;
      mc alias set local http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY};
      mc mb --ignore-existing local/${AVATARS_BUCKET};
      mc anonymous set download local/${AVATARS_BUCKET};
      "
    restart: "no"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep -q '"status":"green"' || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    restart: unless-stopped

volumes:
  postgres_auth_data:
  postgres_users_data:
  postgres_posts_data:
  minio_data:
  kafka_data:
  es-data: