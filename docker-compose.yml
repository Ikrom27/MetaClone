version: '3.9'

services:
  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "${PORT}:8080"
    environment:
      - PORT=8080
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - USERS_SERVICE_URL=${USERS_SERVICE_URL}
      - MEDIA_SERVICE_URL=${MEDIA_SERVICE_URL}
    depends_on:
      - auth-service
      - users-service
      - media-service
    env_file:
      - .env

  auth-service:
    build:
      context: ./auth-service
    ports:
      - "${AUTH_PORT}:8080"
    environment:
      - AUTH_HOST=${AUTH_HOST}
      - AUTH_PORT=${AUTH_PORT}
      - AUTH_DB_HOST=${AUTH_DB_HOST}
      - AUTH_DB_PORT=${AUTH_DB_PORT}
      - AUTH_DB_NAME=${AUTH_DB_NAME}
      - AUTH_DB_USERNAME=${AUTH_DB_USERNAME}
      - AUTH_DB_PASSWORD=${AUTH_DB_PASSWORD}
      - AUTH_DB_AUTO_UPDATE=${AUTH_DB_AUTO_UPDATE}
    depends_on:
      - postgres_auth
      - kafka
      - redis
    env_file:
      - .env

  users-service:
    build:
      context: ./users-service
    ports:
      - "${USERS_PORT}:8080"
    environment:
      - USERS_HOST=${USERS_HOST}
      - USERS_PORT=${USERS_PORT}
      - USERS_DB_HOST=${USERS_DB_HOST}
      - USERS_DB_PORT=${USERS_DB_PORT}
      - USERS_DB_NAME=${USERS_DB_NAME}
      - USERS_DB_USERNAME=${USERS_DB_USERNAME}
      - USERS_DB_PASSWORD=${USERS_DB_PASSWORD}
      - USERS_CACHE_TTL=${USERS_CACHE_TTL}
      - USERS_REDIS_HOST=redis
      - USERS_REDIS_PORT=6379

    depends_on:
      - postgres_users
      - kafka
      - redis
    env_file:
      - .env

  media-service:
    build:
      context: ./media-service
    ports:
      - "${MEDIA_PORT}:8080"
    environment:
      - MEDIA_HOST=${MEDIA_HOST}
      - MEDIA_PORT=${MEDIA_PORT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - s3.internalEndpoint=http://minio:9000
      - s3.publicEndpoint=${S3_PUBLIC_ENDPOINT}
      - S3_REGION=${S3_REGION}
      - AVATARS_BUCKET=${AVATARS_BUCKET}
      - PRESIGN_DURATION_SECONDS=${PRESIGN_DURATION_SECONDS}
      - KAFKA_SERVER=${KAFKA_SERVER}
      - KAFKA_TOPIC_AVATAR_UPDATED=${KAFKA_TOPIC_AVATAR_UPDATED}
    depends_on:
      - minio
    env_file:
      - .env

  postgres_auth:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USERNAME}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  postgres_users:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${USERS_DB_NAME}
      POSTGRES_USER: ${USERS_DB_USERNAME}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: metaclone-cluster
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
    command: server /data
    restart: unless-stopped

  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
    env_file:
      - .env
    environment:
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      AVATARS_BUCKET: ${AVATARS_BUCKET}
    entrypoint: >
      /bin/sh -c "
      set -e;
      sleep 5;
      mc alias set local http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY};
      mc mb --ignore-existing local/${AVATARS_BUCKET};
      mc anonymous set download local/${AVATARS_BUCKET};
      "
    restart: "no"

volumes:
  postgres_auth_data:
  postgres_users_data:
  minio_data:
  kafka_data:
